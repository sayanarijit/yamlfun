# Some useful functions that get imported by default.
:let:
  ##  Negate a boolean value.
  #
  #:- Example: (!) true
  #:  Run:     [(!), {:: true}]
  #:  Result:  false
  #
  #:- Example: (!) false
  #:  Run:     [(!), {:: false}]
  #:  Result:  true
  (!):
    :lambda: [bool]
    :do:
      :if: bool
      :then: { :: false }
      :else: { :: true }

  ### Add two numbers.
  #
  #:- Example: (+) 1 3.5
  #:  Run:     [(+), {:: 1}, {:: 3.5}]
  #:  Result:  4.5
  (+):
    :lambda: [x, y]
    :do:
      :+: [x, y]

  ##  Check if values are the same.
  #
  #:- Example: (==) foo foo
  #:  Run:     [(==), {:: foo}, {:: foo}]
  #:  Result:  true
  #
  #:- Example: (==) 1 1.1
  #:  Run:     [(==), {:: 1}, {:: 1.1}]
  #:  Result:  false
  (==):
    :lambda: [x, y]
    :do:
      :==: [x, y]

  ##  Check if values are different.
  #
  #:- Example: (!=) foo foo
  #:  Run:     [(!=), {:: foo}, {:: foo}]
  #:  Result:  false
  #
  #:- Example: (!=) false 1
  #:  Run:     [(!=), {:: false}, {:: 1}]
  #:  Result:  true
  (!=):
    :lambda: [x, y]
    :do: [(!), [(==), x, y]]

  ##  The logical AND operator. `True` if both inputs are `True`.
  #
  #:- Example: (&&) true true
  #:  Run:     [(&&), {:: true}, {:: true}]
  #:  Result:  true
  #
  #:- Example: (&&) true false
  #:  Run:     [(&&), {:: true}, {:: false}]
  #:  Result:  false
  #
  #:- Example: (&&) false true
  #:  Run:     [(&&), {:: false}, {:: true}]
  #:  Result:  false
  #
  #:- Example: (&&) false false
  #:  Run:     [(&&), {:: false}, {:: true}]
  #:  Result:  false
  (&&):
    :lambda: [x, y]
    :do:
      :if: x
      :then: y
      :else: { :: false }

  ##  The logical OR operator. `True` if any of the inputs is `True`.
  #
  #:- Example: (||) true true
  #:  Run:     [(||), {:: true}, {:: true}]
  #:  Result:  true
  #
  #:- Example: (||) true false
  #:  Run:     [(||), {:: true}, {:: false}]
  #:  Result:  true
  #
  #:- Example: (||) false true
  #:  Run:     [(||), {:: false}, {:: true}]
  #:  Result:  true
  #
  #:- Example: (||) false false
  #:  Run:     [(||), {:: false}, {:: false}]
  #:  Result:  false
  (||):
    :lambda: [x, y]
    :do:
      :if: x
      :then: { :: true }
      :else: y

  ##  The exclusive-or operator. `True` if exactly one input is `True`.
  #
  #:- Example: xor true true
  #:  Run:     [xor, {:: true}, {:: true}]
  #:  Result:  false
  #
  #:- Example: xor true false
  #:  Run:     [xor, {:: true}, {:: false}]
  #:  Result:  true
  #
  #:- Example: xor false true
  #:  Run:     [xor, {:: false}, {:: true}]
  #:  Result:  true
  #
  #:- Example: xor false false
  #:  Run:     [xor, {:: false}, {:: false}]
  #:  Result:  false
  xor:
    :lambda: [x, y]
    :do:
      :if: x
      :then: [(!), y]
      :else: y

  ### Function composition, passing results along in the suggested direction.
  #
  #:- Example: "((<<) (!) ((==) 20)) 10"
  #:  Run:
  #:    - [(<<), (!), [(==), {:: 20}]]
  #:    - {:: 10}
  #:  Result:  true
  (<<):
    :lambda: [g, f, x]
    :do: [g, [f, x]]

  ### Function composition, passing results along in the suggested direction.
  #
  #:- Example: "((>>) ((==) 20) (!)) 10"
  #:  Run:
  #:    - [(>>), [(==), {:: 20}], (!)]
  #:    - {:: 10}
  #:  Result:  true
  (>>):
    :lambda: [f, g, x]
    :do: [g, [f, x]]

  ### Put two appendable things together. This includes strings and lists.
  #
  #:- Example: (++) foo bar
  #:  Run:     [(++), {:: foo}, {:: bar}]
  #:  Result:  foobar
  (++):
    :lambda: [list1, list2]
    :do:
      :++: [list1, list2]

  ### Add an element to the front of a list.
  #
  #:- Example: cons 1 [2, 3]
  #:  Run:     [cons, {:: 1}, {:: [2, 3]}]
  #:  Result:  [1, 2, 3]
  cons:
    :lambda: [element, list]
    :do:
      - (++)
      - :list: [element]
      - list

:in:
  :rec:
    (+): (+)
    (!): (!)
    (==): (==)
    (!=): (!=)
    (<<): (<<)
    (>>): (>>)
    (&&): (&&)
    (||): (||)
    xor: xor
    (++): (++)
    cons: cons
