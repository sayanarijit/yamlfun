#! # List
#!
#! You can create a `List` with the `list: [a, b, c]` or {:: [1, 2, 3]} syntax,
#! so lists are used all over the place. This module has a bunch of functions 
#! to help you work with them!

:let:
  #! ## Create

  #! ### Singleton
  #!
  #! Create a list with only one element.
  #!
  #: - Example: singleton 1
  #:   Run:     [singleton, {:: 1}]
  #:   Result:  [1]
  #!
  #: - Example: singleton foo
  #:   Run:     [singleton, {:: foo}]
  #:   Result:  ["foo"]
  singleton:
    :lambda: [value]
    :do:
      :list: [value]

  #! ### cons
  #!
  #! Add an element to the front of a list.
  #!
  #: - Example: cons 1 [2, 3]
  #:   Run:     [cons, {:: 1}, {:: [2, 3]}]
  #:   Result:  [1, 2, 3]
  cons: Basics.cons

  #! ## Transform

  #! ### append
  #!
  #! Put two appendable things together. This includes strings and lists.
  #!
  #: - Example: append [1, 2] [2, 3]
  #:   Run:     [append, {:: [1, 2]}, {:: [3, 4]}]
  #:   Result:  [1, 2, 3, 4]
  append: (++)

  #! ## Deconstruct

  #! ### head
  #!
  #! Extract the first element of a list.
  #!
  #: - Example: head [1, 2, 3]
  #:   Run:     [head, {:: [1, 2, 3]}]
  #:   Result:  1
  #!
  #: - Example: head []
  #:   Run:     [head, {:: []}]
  #:   Result:  null
  head:
    :lambda: [list]
    :do:
      :case: list
      :of:
        :list:
          :as: [head, tail]
          :do: head

  #! ### tail
  #!
  #! Extract the rest of the list.
  #!
  #: - Example: tail [1, 2, 3]
  #:   Run:     [tail, {:: [1, 2, 3]}]
  #:   Result:  [2, 3]
  #!
  #: - Example: tail []
  #:   Run:     [tail, {:: []}]
  #:   Result:  []
  tail:
    :lambda: [list]
    :do:
      :case: list
      :of:
        :list:
          :as: [head, tail]
          :do: tail

:in:
  :rec:
    append: append
    cons: cons
    head: head
    tail: tail
    singleton: singleton
