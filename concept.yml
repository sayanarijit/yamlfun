:let:
  (+):
    :lambda: [x, y]
    :do:
      :+: [x, y]

  (==):
    :lambda: [x, y]
    :do:
      :==: [x, y]

  Maybe:
    :rec:
      map:
        :lambda: [callback, val]
        :do:
          :if: [(==), val, { :: null }]
          :then: val
          :else: [callback, val]

      withDefault:
        :lambda: [default, val]
        :do:
          :if: [(==), val, { :: null }]
          :then: default
          :else: val

  List:
    :rec:
      head:
        :lambda: [list]
        :do:
          :case: list
          :of:
            :list:
              :as: [head, tail]
              :do: head

      tail:
        :lambda: [list]
        :do:
          :case: list
          :of:
            :list:
              :as: [head, tail]
              :do: tail

  Cons:
    :rec:
      new:
        :lambda: [a, b, op]
        :do: [op, a, b]

      car:
        :lambda: [cons]
        :do:
          - cons
          - :lambda: [a, b]
            :do: a

      cdr:
        :lambda: [cons]
        :do:
          - cons
          - :lambda: [a, b]
            :do: b

  cons: [Cons.new, { :: 1 }, { :: 2 }]
  foobar:
    - (+)
    - { :: foo }
    - { :: bar }

  things:
    - (+)
    - :list:
        - foobar
        - cons
        - Maybe
        - [Cons.car, cons]
    - :: [1, 1.2, -9, null, bar]
:in:
  :rec:
    a: [Maybe.map, [(+), { :: 1 }], { :: 5 }]
    b: [Maybe.map, [(+), { :: 1 }], { :: null }]
    c: [Maybe.withDefault, { :: 0 }, { :: null }]
    d:
      - [Maybe.withDefault, { :: 0 }]
      - - [Maybe.map, [(+), { :: 1 }]]
        - - [Maybe.map, [(+), { :: 1 }]]
          - { :: 10 }
    e:
      :|>:
        - { :: 10 }
        - [Maybe.map, [(+), { :: 1 }]]
        - [Maybe.map, [(+), { :: 1 }]]
        - [Maybe.withDefault, { :: 0 }]

    f: [Cons.car, cons]
    g: [Cons.cdr, cons]
    h: [List.head, things]
    i:
      :|>:
        - [List.tail, things]
        - List.head
        - Cons.car
